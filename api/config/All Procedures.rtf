{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ///////////////////\
// Proc_insert_devotee\
//////////////////\
DELIMITER $$\
CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_INSERT_DEVOTEE`(IN `p_Devotee_Key` VARCHAR(10), IN `p_Devotee_Type` VARCHAR(30), IN `p_Devotee_First_Name` VARCHAR(50), IN `p_Devotee_Last_Name` VARCHAR(50), IN `p_Devotee_Gender` VARCHAR(6), IN `p_Devotee_ID_Type` VARCHAR(10), IN `p_Devotee_ID_Number` VARCHAR(50), IN `p_Devotee_Station` VARCHAR(50), IN `p_Devotee_Cell_Phone_Number` VARCHAR(15), IN `p_Devotee_Status` VARCHAR(20), IN `p_Devotee_Remarks` VARCHAR(250), IN `p_Devotee_Record_Updated_By` VARCHAR(10), IN `p_Devotee_Accommodation_ID` VARCHAR(10), IN `p_Devotee_Accomodation_Status` VARCHAR(10))\
BEGIN\
\
    INSERT INTO devotee(\
        Devotee_Key,\
        Devotee_Type,\
        Devotee_First_Name,\
        Devotee_Last_Name,\
        Devotee_Gender,\
        Devotee_ID_Type,\
        Devotee_ID_Number,\
        Devotee_Station,\
        Devotee_Cell_Phone_Number,\
        Devotee_Status,\
        Devotee_Remarks,\
        Devotee_Record_Update_Date_Time,\
        Devotee_Record_Updated_By\
    )\
VALUES(\
    p_Devotee_Key,\
    p_Devotee_Type,\
    p_Devotee_First_Name,\
    p_Devotee_Last_Name,\
    p_Devotee_Gender,\
    p_Devotee_ID_Type,\
    p_Devotee_ID_Number,\
    p_Devotee_Station,\
    p_Devotee_Cell_Phone_Number,\
    p_Devotee_Status,\
    p_Devotee_Remarks,\
    NOW(),\
    p_Devotee_Record_Updated_By\
);\
\
INSERT INTO Devotee_Accomodation(\
    Accomodation_Key,\
    Devotee_Key,\
    Accomodation_Year,\
    Arrival_Date_Time,\
    Departure_Date_Time,\
    Accomodation_Status,\
    Devotee_Accomodation_Update_Date_Time,\
    Devotee_Accomodation_Updated_By\
)\
VALUES(\
    p_Devotee_Accommodation_ID,\
    p_Devotee_Key,\
    YEAR(NOW()),\
    NOW(),\
    NULL,\
    p_Devotee_Accomodation_Status,\
    NOW(),\
    p_Devotee_Record_Updated_By\
);\
\
UPDATE Accommodation_Availability SET\
	Allocated_Count = Allocated_Count + 1,\
    Available_Count = Available_Count - 1\
WHERE	\
	Accomodation_Key = p_Devotee_Accommodation_ID;\
\
END$$\
DELIMITER ;\
\
///////////////\
// Proc_Manage_Amenity\
///////////////\
DELIMITER $$\
CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MANAGE_AMENITY`(\
    IN `p_Devotee_Key` VARCHAR(10),\
    IN `p_Amenity_Key` VARCHAR(10),\
    IN `p_Amenity_Quantity` INT,\
    IN `p_Amenity_Managed_By` VARCHAR(10)\
)\
BEGIN\
    DECLARE\
        v_past_amenity_quantity INT ; DECLARE v_amenity_action VARCHAR(20) ; \
        \
        \
    SELECT\
        IFNULL(SUM(Amenity_Quantity),0)\
    INTO v_past_amenity_quantity\
FROM\
    Devotee_Amenities_Allocation\
WHERE\
    Devotee_Key = p_Devotee_Key AND Amenity_Key = p_Amenity_Key AND Amenity_Allocation_Status = 'Allocated' AND Amenity_Allocation_Year = YEAR(NOW()) ;\
REPLACE\
INTO\
	`Devotee_Amenities_Allocation`(\
    `Amenity_Key`,\
    `Devotee_Key`,\
    `Amenity_Quantity`,\
    `Amenity_Allocation_Year`,\
    `Amenity_Allocation_Status`,\
    `Amenity_Allocation_Date_Time`,\
    `Amenity_Allocated_By`\
)\
VALUES(\
    p_Amenity_Key,\
    p_Devotee_Key,\
    v_past_amenity_quantity + p_Amenity_Quantity,\
    YEAR(NOW()), 'Allocated', NOW(), p_Amenity_Managed_By);\
    \
UPDATE\
    Amenities_Availability\
SET\
    Allocated_Count = Allocated_Count + p_Amenity_Quantity,\
    Available_Count = Available_Count - p_Amenity_Quantity\
WHERE\
    Amenity_Key = p_Amenity_Key ; \
    \
\
IF p_Amenity_Quantity > 0 THEN\
SET\
    v_amenity_action = 'Allocated' ; ELSE\
SET\
    v_amenity_action = 'Returned' ;\
    END IF ;\
    \
INSERT INTO `Amenities_Allocation_Log`(\
    `Amenity_Key`,\
    `Devotee_Key`,\
    `Amenity_Quantity`,\
    `Amenity_Action`,\
    `Amenity_Action_Year`,\
    `Amenity_Action_By`,\
    `Amenity_Action_Date_Time`\
)\
VALUES(\
    p_Amenity_Key,\
    p_Devotee_Key,\
    p_Amenity_Quantity,\
    v_amenity_action,\
    YEAR(NOW()),\
    p_Amenity_Managed_By,\
    NOW()) ;\
END$$\
DELIMITER ;\
///////////////////\
// Proc_refresh_acco_count\
//////////////////\
DELIMITER $$\
CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_REFRESH_ACCO_COUNT`()\
BEGIN\
\
	DECLARE v_finished INTEGER DEFAULT 0 ;\
    DECLARE v_accommodation_key VARCHAR(10) DEFAULT "" ;\
    DECLARE v_accommodation_count INTEGER DEFAULT 0 ;\
    DECLARE v_accommodation_capacity INTEGER DEFAULT 0 ;\
\
	DECLARE csr_accomodation CURSOR FOR\
      SELECT\
    am.accomodation_key,\
    COUNT(da.Accomodation_Key),\
    am.accomodation_capacity\
FROM\
    Accommodation_Master am\
LEFT OUTER JOIN Devotee_Accomodation da ON\
    am.Accomodation_Key = da.Accomodation_Key AND da.Accomodation_Year = YEAR(NOW()) AND da.Accomodation_Status = 'Allocated'\
GROUP BY\
    am.Accomodation_Key;\
\
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished = 1 ;\
    \
	OPEN csr_accomodation ;\
    \
		WHILE v_finished = 0 DO\
        	\
            FETCH csr_accomodation INTO v_accommodation_key, v_accommodation_count, v_accommodation_capacity ;\
            \
            IF v_finished = 0 THEN\
            	UPDATE\
                    Accommodation_Availability\
                SET\
                    allocated_count = v_accommodation_count,\
                    available_count = v_accommodation_capacity - (reserved_count + out_of_availability_count + v_accommodation_count)\
                WHERE\
                    accomodation_key = v_accommodation_key ;\
                END IF ;\
        	\
		END WHILE ;\
    \
    CLOSE csr_accomodation ;\
END$$\
DELIMITER ;\
////////////////\
// Proc_refresh_amenity_Count\
////////////////\
DELIMITER $$\
CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_REFRESH_AMENITY_COUNT`()\
BEGIN\
\
	DECLARE v_finished INTEGER DEFAULT 0 ;\
    DECLARE v_amenity_key VARCHAR(10) DEFAULT "" ;\
    DECLARE v_amenity_count INTEGER DEFAULT 0 ;\
    DECLARE v_amenity_quantity INTEGER DEFAULT 0 ;\
\
	DECLARE csr_amenity CURSOR FOR\
      SELECT\
    am.amenity_key,\
    IFNULL(SUM(da.Amenity_Quantity), 0),\
    am.amenity_quantity\
FROM\
    Amenity_Master am\
LEFT OUTER JOIN Devotee_Amenities_Allocation da ON\
    am.Amenity_Key = da.Amenity_Key AND da.Amenity_Allocation_Year = YEAR(NOW()) AND da.Amenity_Allocation_Status = 'Allocated'\
GROUP BY\
    am.Amenity_Key;\
\
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finished = 1 ;\
    \
	OPEN csr_amenity ;\
    \
		WHILE v_finished = 0 DO\
        	\
            FETCH csr_amenity INTO v_amenity_key, v_amenity_count, v_amenity_quantity ;\
            \
            IF v_finished = 0 THEN\
            	UPDATE\
                    Amenities_Availability\
                SET\
                    allocated_count = v_amenity_count,\
                    available_count = v_amenity_quantity - (reserved_count + out_of_availability_count + v_amenity_count)\
                WHERE\
                    amenity_key = v_amenity_key ;\
                END IF ;\
        	\
		END WHILE ;\
    \
    CLOSE csr_amenity ;\
END$$\
DELIMITER ;\
//////////////////\
// Proc_replace_devotee\
/////////////////\
DELIMITER $$\
CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_REPLACE_DEVOTEE`(IN `p_Devotee_Key` VARCHAR(10), IN `p_Devotee_Type` VARCHAR(30), IN `p_Devotee_First_Name` VARCHAR(50), IN `p_Devotee_Last_Name` VARCHAR(50), IN `p_Devotee_Gender` VARCHAR(6), IN `p_Devotee_ID_Type` VARCHAR(10), IN `p_Devotee_ID_Number` VARCHAR(50), IN `p_Devotee_Station` VARCHAR(50), IN `p_Devotee_Cell_Phone_Number` VARCHAR(15), IN `p_Devotee_Status` VARCHAR(20), IN `p_Devotee_Remarks` VARCHAR(250), IN `p_Devotee_Record_Updated_By` VARCHAR(10), IN `p_Devotee_Accommodation_ID` VARCHAR(10), IN `p_Devotee_Accomodation_Status` VARCHAR(10))\
BEGIN\
	\
    DECLARE v_past_accomodation varchar(10);\
    DECLARE v_past_accomodation_Count varchar(10);    \
\
       REPLACE INTO devotee(\
        Devotee_Key,\
        Devotee_Type,\
        Devotee_First_Name,\
        Devotee_Last_Name,\
        Devotee_Gender,\
        Devotee_ID_Type,\
        Devotee_ID_Number,\
        Devotee_Station,\
        Devotee_Cell_Phone_Number,\
        Devotee_Status,\
        Devotee_Remarks,\
        Devotee_Record_Update_Date_Time,\
        Devotee_Record_Updated_By\
    )\
VALUES(\
    p_Devotee_Key,\
    p_Devotee_Type,\
    p_Devotee_First_Name,\
    p_Devotee_Last_Name,\
    p_Devotee_Gender,\
    p_Devotee_ID_Type,\
    p_Devotee_ID_Number,\
    p_Devotee_Station,\
    p_Devotee_Cell_Phone_Number,\
    p_Devotee_Status,\
    p_Devotee_Remarks,\
    NOW(),\
    p_Devotee_Record_Updated_By\
);\
\
\
SELECT count(*) INTO v_past_accomodation_count  FROM Devotee_Accomodation WHERE\
Devotee_Key = p_Devotee_Key AND\
Accomodation_Status = 'Allocated' AND\
Accomodation_Year = YEAR(NOW()) AND\
Accomodation_key = p_Devotee_Accommodation_ID;\
\
IF (v_past_accomodation_Count = 0) THEN\
\
SELECT accomodation_key INTO v_past_accomodation  FROM Devotee_Accomodation WHERE\
Devotee_Key = p_Devotee_Key AND\
Accomodation_Status = 'Allocated' AND\
Accomodation_Year = YEAR(NOW()) \
ORDER BY \
Devotee_Accomodation_Update_Date_Time DESC\
LIMIT 1;\
\
UPDATE Devotee_Accomodation SET Accomodation_Status = 'Departed' ,  Devotee_Accomodation_Updated_By = p_Devotee_Record_Updated_By, Departure_date_time = NOW() WHERE Devotee_Key = p_Devotee_Key;\
\
UPDATE Accommodation_Availability SET\
	Allocated_Count = Allocated_Count - 1,\
    Available_Count = Available_Count + 1\
WHERE	\
	Accomodation_Key = v_past_accomodation;\
    \
INSERT INTO Devotee_Accomodation(\
    Accomodation_Key,\
    Devotee_Key,\
    Accomodation_Year,\
    Arrival_Date_Time,\
    Departure_Date_Time,\
    Accomodation_Status,\
    Devotee_Accomodation_Update_Date_Time,\
    Devotee_Accomodation_Updated_By\
)\
VALUES(\
    p_Devotee_Accommodation_ID,\
    p_Devotee_Key,\
    YEAR(NOW()),\
    NOW(),\
    NULL,\
    p_Devotee_Accomodation_Status,\
    NOW(),\
    p_Devotee_Record_Updated_By\
);\
\
UPDATE Accommodation_Availability SET\
	Allocated_Count = Allocated_Count + 1,\
    Available_Count = Available_Count - 1\
WHERE	\
	Accomodation_Key = p_Devotee_Accommodation_ID;\
END IF;\
\
\
END$$\
DELIMITER ;\
////////////////////\
// Proc_update_devotee\
///////////////////\
DELIMITER $$\
CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_UPDATE_DEVOTEE`(IN `p_Devotee_Key` VARCHAR(10), IN `p_Devotee_Type` VARCHAR(30), IN `p_Devotee_First_Name` VARCHAR(50), IN `p_Devotee_Last_Name` VARCHAR(50), IN `p_Devotee_Gender` VARCHAR(6), IN `p_Devotee_ID_Type` VARCHAR(10), IN `p_Devotee_ID_Number` VARCHAR(50), IN `p_Devotee_Station` VARCHAR(50), IN `p_Devotee_Cell_Phone_Number` VARCHAR(15), IN `p_Devotee_Status` VARCHAR(20), IN `p_Devotee_Remarks` VARCHAR(250), IN `p_Devotee_Record_Updated_By` VARCHAR(10), IN `p_Devotee_Accommodation_ID` VARCHAR(10), IN `p_Devotee_Accomodation_Status` VARCHAR(10))\
BEGIN\
	\
    DECLARE v_past_accomodation varchar(10);\
    DECLARE v_past_accomodation_Count varchar(10);    \
\
    UPDATE devotee SET\
        Devotee_Type = p_Devotee_Type,\
        Devotee_First_Name = p_Devotee_First_Name,\
        Devotee_Last_Name = p_Devotee_Last_Name,\
        Devotee_Gender = p_Devotee_Gender,\
        Devotee_ID_Type = p_Devotee_ID_Type,\
        Devotee_ID_Number = p_Devotee_ID_Number,\
        Devotee_Station = p_Devotee_Station,\
        Devotee_Cell_Phone_Number = p_Devotee_Cell_Phone_Number,\
        Devotee_Status = p_Devotee_Status,\
        Devotee_Remarks = p_Devotee_Remarks,\
        Devotee_Record_Update_Date_Time = NOW(),\
        Devotee_Record_Updated_By = p_Devotee_Record_Updated_By\
     WHERE Devotee_Key = p_Devotee_Key;\
\
SELECT count(*) INTO v_past_accomodation_count  FROM Devotee_Accomodation WHERE\
Devotee_Key = p_Devotee_Key AND\
Accomodation_Status = 'Allocated' AND\
Accomodation_Year = YEAR(NOW()) AND\
Accomodation_key = p_Devotee_Accommodation_ID;\
\
IF (v_past_accomodation_Count = 0) THEN\
\
SELECT accomodation_key INTO v_past_accomodation  FROM Devotee_Accomodation WHERE\
Devotee_Key = p_Devotee_Key AND\
Accomodation_Status = 'Allocated' AND\
Accomodation_Year = YEAR(NOW()) \
ORDER BY \
Devotee_Accomodation_Update_Date_Time DESC\
LIMIT 1;\
\
UPDATE Devotee_Accomodation SET Accomodation_Status = 'Departed' ,  Devotee_Accomodation_Updated_By = p_Devotee_Record_Updated_By, Departure_date_time = NOW() WHERE Devotee_Key = p_Devotee_Key;\
\
UPDATE Accommodation_Availability SET\
	Allocated_Count = Allocated_Count - 1,\
    Available_Count = Available_Count + 1\
WHERE	\
	Accomodation_Key = v_past_accomodation;\
    \
INSERT INTO Devotee_Accomodation(\
    Accomodation_Key,\
    Devotee_Key,\
    Accomodation_Year,\
    Arrival_Date_Time,\
    Departure_Date_Time,\
    Accomodation_Status,\
    Devotee_Accomodation_Update_Date_Time,\
    Devotee_Accomodation_Updated_By\
)\
VALUES(\
    p_Devotee_Accommodation_ID,\
    p_Devotee_Key,\
    YEAR(NOW()),\
    NOW(),\
    NULL,\
    p_Devotee_Accomodation_Status,\
    NOW(),\
    p_Devotee_Record_Updated_By\
);\
\
UPDATE Accommodation_Availability SET\
	Allocated_Count = Allocated_Count + 1,\
    Available_Count = Available_Count - 1\
WHERE	\
	Accomodation_Key = p_Devotee_Accommodation_ID;\
END IF;\
\
\
END$$\
DELIMITER ;\
/////////////////\
// Proc_upsert_acco\
/////////////////\
DELIMITER $$\
CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_UPSERT_ACCO`(IN `p_Accomodation_Key` VARCHAR(5), IN `p_Accomodation_Name` VARCHAR(100), IN `p_Accomodation_Capacity` INT(11), IN `p_Reserved_Count` INT(11), IN `p_Out_of_Availability_Count` INT(11), IN `p_Accomodation_Updated_By` VARCHAR(10))\
BEGIN\
    REPLACE\
INTO `Accommodation_Master`(\
    `Accomodation_Key`,\
    `Accomodation_Name`,\
    `Accomodation_Capacity`,\
    `Accomodation_Update_Date_Time`,\
    `Accomodation_Updated_By`\
)\
VALUES(\
    p_Accomodation_Key,\
    p_Accomodation_Name,\
    p_Accomodation_Capacity,\
    NOW(), p_Accomodation_Updated_By) ;\
    \
REPLACE\
INTO `Accommodation_Availability`(\
    `Accomodation_Key`,\
    `Reserved_Count`,\
    `Out_of_Availability_Count`,\
    `Availability_Update_Date_Time`,\
    `Availability_Updated_By`\
)\
VALUES(\
    p_Accomodation_Key,\
    p_Reserved_Count,\
    p_Out_of_Availability_Count,\
    NOW(),\
    p_Accomodation_Updated_By\
    );\
\
CALL PROC_REFRESH_ACCO_COUNT();\
\
END$$\
DELIMITER ;\
///////////////////\
// Proc_upsert_Amenity\
/////////////////////\
DELIMITER $$\
CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_UPSERT_AMENITY`(IN `p_Amenity_Key` VARCHAR(5), IN `p_Amenity_Name` VARCHAR(100), IN `p_Amenity_Status` VARCHAR(20), IN `p_Amenity_Quantity` INT(11), IN `p_Reserved_Count` INT(11), IN `p_Out_of_Availability_Count` INT(11), IN `p_Amenity_Updated_By` VARCHAR(10))\
BEGIN\
    REPLACE\
INTO `Amenity_Master`(\
    `Amenity_Key`,\
    `Amenity_Name`,\
    `Amenity_Status`,\
    `Amenity_Quantity`,\
    `Amenity_Record_Update_Date_Time`,\
    `Amenity_Record_Upated_by`\
)\
VALUES(\
    p_Amenity_Key,\
    p_Amenity_Name,\
    p_Amenity_Status,\
    p_Amenity_Quantity,\
    NOW(), p_Amenity_Updated_By) ;\
    \
REPLACE\
INTO `Amenities_Availability`(\
    `Amenity_Key`,\
    `Reserved_Count`,\
    `Out_of_Availability_Count`,\
    `Availability_Update_Date_Time`,\
    `Availability_Updated_By`\
)\
VALUES(\
    p_Amenity_Key,\
    p_Reserved_Count,\
    p_Out_of_Availability_Count,\
    NOW(), p_Amenity_Updated_By) ;\
CALL\
    PROC_REFRESH_AMENITY_COUNT() ;\
    END$$\
DELIMITER ;}